// <auto-generated />
using System;
using FavourAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FavourAPI.Data.Migrations
{
    [DbContext(typeof(WorkFavourDbContext))]
    [Migration("20190803215102_jobOfferSplit")]
    partial class jobOfferSplit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FavourAPI.Data.Models.ActiveJobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("ActiveJobOffers");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ActiveJobOfferId");

                    b.Property<Guid?>("ConsumerId");

                    b.Property<Guid?>("JobOfferId");

                    b.Property<string>("Message");

                    b.Property<string>("StateValue");

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.HasIndex("ActiveJobOfferId");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("JobOfferId");

                    b.HasIndex("StateValue");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.CompanyProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Bulstat");

                    b.Property<string>("Description");

                    b.Property<DateTime>("FoundedYear");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfEmployees");

                    b.Property<Guid?>("ProfilePhotoName");

                    b.HasKey("Id");

                    b.HasIndex("ProfilePhotoName");

                    b.ToTable("CompanyProviders");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.CompletedJobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsumerId");

                    b.Property<Guid?>("ResultId");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("ResultId");

                    b.ToTable("CompletedJobOffers");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.CompletionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsumerId");

                    b.Property<string>("ReviewForConsumer");

                    b.Property<string>("ReviewForProvider");

                    b.Property<string>("StateValue");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("StateValue");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Consumer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("CV");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("LocationId");

                    b.Property<Guid?>("PhoneNumberId");

                    b.Property<Guid?>("ProfilePhotoName");

                    b.Property<string>("SexValue");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("PhoneNumberId");

                    b.HasIndex("ProfilePhotoName");

                    b.HasIndex("SexValue");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Education", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsumerId");

                    b.Property<DateTime>("End");

                    b.Property<Guid?>("FieldId");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("FieldId");

                    b.ToTable("Educations");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress");

                    b.Property<string>("Label");

                    b.Property<Guid?>("OfficeId");

                    b.Property<Guid?>("PersonProviderId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PersonProviderId");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Enums.ApplicationStateDb", b =>
                {
                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Value");

                    b.ToTable("ApplicationStates");

                    b.HasData(
                        new
                        {
                            Value = "Pending"
                        },
                        new
                        {
                            Value = "Accepted"
                        },
                        new
                        {
                            Value = "Rejected"
                        });
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Enums.CompletionResultStateDb", b =>
                {
                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Value");

                    b.ToTable("CompletionResultStateDb");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Enums.SexDb", b =>
                {
                    b.Property<string>("Value")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Value");

                    b.ToTable("Sexes");

                    b.HasData(
                        new
                        {
                            Value = "Male"
                        },
                        new
                        {
                            Value = "Female"
                        });
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Experience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName");

                    b.Property<Guid?>("ConsumerId");

                    b.Property<bool>("CurrentlyWorking");

                    b.Property<string>("Description");

                    b.Property<DateTime>("End");

                    b.Property<Guid?>("PositionId");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("PositionId");

                    b.ToTable("Experiences");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.FieldOfStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FieldsOfStudy");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Image", b =>
                {
                    b.Property<Guid>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentType");

                    b.Property<int>("Size");

                    b.Property<string>("Uri");

                    b.HasKey("Name");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Industry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyProviderId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProviderId");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da709213-0650-4806-9f53-1eab31bc8e95"),
                            Name = "Test industry 1"
                        },
                        new
                        {
                            Id = new Guid("217aeb85-dbb0-447a-b603-e83c9e7c4fd8"),
                            Name = "Test industry 2"
                        },
                        new
                        {
                            Id = new Guid("61c0b069-dbbb-4904-89a0-abcbc77d0c2d"),
                            Name = "Test industry 3"
                        },
                        new
                        {
                            Id = new Guid("32f88f25-9cfa-43ea-bf82-c3dc556cb35a"),
                            Name = "Test industry 4"
                        },
                        new
                        {
                            Id = new Guid("32d9844c-2a20-4301-acd2-d9267c1d56b9"),
                            Name = "Test industry 5"
                        },
                        new
                        {
                            Id = new Guid("c8c362a8-053d-4a7e-bd29-eaf641f041f8"),
                            Name = "Test industry 6"
                        },
                        new
                        {
                            Id = new Guid("543a04e7-0d27-48c7-9ffe-7b118f1e2367"),
                            Name = "Test industry 7"
                        },
                        new
                        {
                            Id = new Guid("7eabe811-117e-4e5a-954b-47bab514b9e9"),
                            Name = "Test industry 8"
                        },
                        new
                        {
                            Id = new Guid("353a8925-ae2a-41e2-8352-e1c8297badc8"),
                            Name = "Test industry 9"
                        });
                });

            modelBuilder.Entity("FavourAPI.Data.Models.IndustryPosition", b =>
                {
                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndustryId", "PositionId");

                    b.HasIndex("PositionId");

                    b.ToTable("IndustryPositions");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.JobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description");

                    b.Property<double>("Money");

                    b.Property<Guid?>("ProviderId");

                    b.Property<Guid?>("ResultId");

                    b.Property<DateTime>("TimePosted");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("ResultId");

                    b.ToTable("JobOffers");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.JobOfferLocation", b =>
                {
                    b.Property<Guid>("JobOfferId");

                    b.Property<Guid>("LocationId");

                    b.HasKey("JobOfferId", "LocationId");

                    b.HasIndex("LocationId");

                    b.ToTable("JobOfferLocations");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.JobPhoto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Photo");

                    b.HasKey("Id");

                    b.HasIndex("JobOfferId");

                    b.ToTable("JobPhotos");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country");

                    b.Property<string>("CustomInfo");

                    b.Property<double?>("Latitude");

                    b.Property<double?>("Longitude");

                    b.Property<string>("Region");

                    b.Property<string>("StreetAddress");

                    b.Property<string>("Town");

                    b.Property<string>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Office", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyProviderId");

                    b.Property<Guid?>("LocationId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProviderId");

                    b.HasIndex("LocationId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.OfficeIndustry", b =>
                {
                    b.Property<Guid>("IndustryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OfficeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IndustryId", "OfficeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("OfficeIndustries");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.OngoingJobOffer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConsumerId");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.ToTable("OngoingJobOffers");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("EndHour");

                    b.Property<Guid?>("JobOfferId");

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime>("StartHour");

                    b.HasKey("Id");

                    b.HasIndex("JobOfferId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CurrentCount");

                    b.Property<string>("PermissionNameId");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionNameId");

                    b.HasIndex("UserId", "PermissionNameId")
                        .IsUnique()
                        .HasFilter("[PermissionNameId] IS NOT NULL");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PermissionMy", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("CanApplyConsumer");

                    b.Property<bool>("HasSufficientInfoConsumer");

                    b.Property<bool>("HasSufficientInfoProvider");

                    b.HasKey("Id");

                    b.ToTable("PermissionMys");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PermissionName", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("RoleId");

                    b.HasKey("Name");

                    b.HasIndex("RoleId");

                    b.ToTable("PermissionNames");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PermissionTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date");

                    b.Property<int>("ItemCount");

                    b.Property<double>("MoneyPerItem");

                    b.Property<string>("PermissionName");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PermissionName");

                    b.HasIndex("UserId");

                    b.ToTable("PermissionTransactions");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PersonProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description");

                    b.Property<string>("FirstName");

                    b.Property<byte[]>("Image");

                    b.Property<string>("LastName");

                    b.Property<Guid?>("LocationId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PersonProviders");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PhoneNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label");

                    b.Property<string>("Number");

                    b.Property<Guid?>("OfficeId");

                    b.Property<Guid?>("PersonProviderId");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PersonProviderId");

                    b.ToTable("PhoneNumbers");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CompanyProviderId");

                    b.Property<Guid?>("FieldOfStudyId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProviderId");

                    b.HasIndex("FieldOfStudyId");

                    b.ToTable("Positions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("48adbd4a-5f8b-4592-9c3d-9632988ab656"),
                            Name = "Test position 1"
                        },
                        new
                        {
                            Id = new Guid("352b8c3b-22d0-42de-bba9-33a3add5331d"),
                            Name = "Test position 2"
                        },
                        new
                        {
                            Id = new Guid("f9aba110-896f-4026-84cc-f8a8c71009b3"),
                            Name = "Test position 3"
                        },
                        new
                        {
                            Id = new Guid("aa7256ec-2494-45c6-aa85-4c773ec4db33"),
                            Name = "Test position 4"
                        },
                        new
                        {
                            Id = new Guid("8dfcd12d-9a97-4cfc-b492-5920e1571f74"),
                            Name = "Test position 5"
                        },
                        new
                        {
                            Id = new Guid("aee6824e-147e-4787-8105-25728ae2fc0a"),
                            Name = "Test position 6"
                        },
                        new
                        {
                            Id = new Guid("b1b8f2dd-3949-454f-971f-2cd0c4739c91"),
                            Name = "Test position 7"
                        });
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PositionSkill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SkillName");

                    b.HasKey("SkillId", "PositionId");

                    b.HasAlternateKey("PositionId", "SkillId");

                    b.HasIndex("SkillName");

                    b.ToTable("PositionSkills");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.ProviderViewTime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Applications");

                    b.Property<DateTime>("OngoingJobOffers");

                    b.HasKey("Id");

                    b.ToTable("ProviderViewTimes");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueIdentifier");

                    b.Property<string>("Name1");

                    b.HasKey("Id");

                    b.HasIndex("Name1");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.RoleName", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.HasKey("Name");

                    b.ToTable("RoleName");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.SavedJobOffer", b =>
                {
                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("JobOfferId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ConsumerId", "JobOfferId");

                    b.HasIndex("JobOfferId");

                    b.ToTable("SavedJobOffers");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Skill", b =>
                {
                    b.Property<string>("Name")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConsumerId");

                    b.Property<Guid?>("JobOfferId");

                    b.HasKey("Name");

                    b.HasIndex("ConsumerId");

                    b.HasIndex("JobOfferId");

                    b.ToTable("Skills");

                    b.HasData(
                        new
                        {
                            Name = "Test skill 1"
                        },
                        new
                        {
                            Name = "Test skill 2"
                        },
                        new
                        {
                            Name = "Test skill 3"
                        },
                        new
                        {
                            Name = "Test skill 4"
                        },
                        new
                        {
                            Name = "Test skill 5"
                        });
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount");

                    b.Property<DateTime>("End");

                    b.Property<Guid?>("RoleId");

                    b.Property<DateTime>("Start");

                    b.Property<Guid?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Token");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.ActiveJobOffer", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.JobOffer", "JobOffer")
                        .WithOne("ActiveState")
                        .HasForeignKey("FavourAPI.Data.Models.ActiveJobOffer", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Application", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.ActiveJobOffer")
                        .WithMany("Applications")
                        .HasForeignKey("ActiveJobOfferId");

                    b.HasOne("FavourAPI.Data.Models.Consumer", "Consumer")
                        .WithMany("Applications")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("FavourAPI.Data.Models.JobOffer", "JobOffer")
                        .WithMany("Applications")
                        .HasForeignKey("JobOfferId");

                    b.HasOne("FavourAPI.Data.Models.Enums.ApplicationStateDb", "State")
                        .WithMany("Applications")
                        .HasForeignKey("StateValue");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.CompanyProvider", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.User", "User")
                        .WithOne("CompanyProvider")
                        .HasForeignKey("FavourAPI.Data.Models.CompanyProvider", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.Image", "ProfilePhoto")
                        .WithMany()
                        .HasForeignKey("ProfilePhotoName");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.CompletedJobOffer", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Consumer")
                        .WithMany("CompletedJobs")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("FavourAPI.Data.Models.JobOffer", "JobOffer")
                        .WithOne("CompletedState")
                        .HasForeignKey("FavourAPI.Data.Models.CompletedJobOffer", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.CompletionResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.CompletionResult", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Consumer", "Consumer")
                        .WithMany()
                        .HasForeignKey("ConsumerId");

                    b.HasOne("FavourAPI.Data.Models.Enums.CompletionResultStateDb", "State")
                        .WithMany("CompletionResults")
                        .HasForeignKey("StateValue");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Consumer", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.User", "User")
                        .WithOne("Consumer")
                        .HasForeignKey("FavourAPI.Data.Models.Consumer", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("FavourAPI.Data.Models.PhoneNumber", "PhoneNumber")
                        .WithMany()
                        .HasForeignKey("PhoneNumberId");

                    b.HasOne("FavourAPI.Data.Models.Image", "ProfilePhoto")
                        .WithMany()
                        .HasForeignKey("ProfilePhotoName");

                    b.HasOne("FavourAPI.Data.Models.Enums.SexDb", "Sex")
                        .WithMany("Consumers")
                        .HasForeignKey("SexValue");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Education", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Consumer")
                        .WithMany("Education")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("FavourAPI.Data.Models.FieldOfStudy", "Field")
                        .WithMany()
                        .HasForeignKey("FieldId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Email", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Office")
                        .WithMany("Emails")
                        .HasForeignKey("OfficeId");

                    b.HasOne("FavourAPI.Data.Models.PersonProvider")
                        .WithMany("Emails")
                        .HasForeignKey("PersonProviderId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Experience", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Consumer", "Consumer")
                        .WithMany("Experiences")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("FavourAPI.Data.Models.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Industry", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.CompanyProvider")
                        .WithMany("Industries")
                        .HasForeignKey("CompanyProviderId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.IndustryPosition", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Industry", "Industry")
                        .WithMany("IndustryPositions")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.Position", "Position")
                        .WithMany("IndustryPositions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.JobOffer", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.CompanyProvider", "Provider")
                        .WithMany("Offers")
                        .HasForeignKey("ProviderId");

                    b.HasOne("FavourAPI.Data.Models.CompletionResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.JobOfferLocation", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.JobOffer", "JobOffer")
                        .WithMany("Locations")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.JobPhoto", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.JobOffer", "JobOffer")
                        .WithMany("Photos")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Office", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.CompanyProvider", "CompanyProvider")
                        .WithMany("Offices")
                        .HasForeignKey("CompanyProviderId");

                    b.HasOne("FavourAPI.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.OfficeIndustry", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Industry", "Industry")
                        .WithMany("OfficeIndustries")
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.Office", "Office")
                        .WithMany("OfficeIndustries")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.OngoingJobOffer", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Consumer", "Consumer")
                        .WithMany("OngoingJobOffers")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("FavourAPI.Data.Models.JobOffer", "JobOffer")
                        .WithOne("OngoingState")
                        .HasForeignKey("FavourAPI.Data.Models.OngoingJobOffer", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Period", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.JobOffer", "JobOffer")
                        .WithMany("Periods")
                        .HasForeignKey("JobOfferId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Permission", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.PermissionName", "PermissionName")
                        .WithMany()
                        .HasForeignKey("PermissionNameId");

                    b.HasOne("FavourAPI.Data.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PermissionMy", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.User", "User")
                        .WithOne("PermissionMy")
                        .HasForeignKey("FavourAPI.Data.Models.PermissionMy", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PermissionName", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Role")
                        .WithMany("PermissionsForRole")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PermissionTransaction", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.PermissionName", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionName");

                    b.HasOne("FavourAPI.Data.Models.User", "User")
                        .WithMany("Transactions")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PersonProvider", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.User", "User")
                        .WithOne("PersonProvider")
                        .HasForeignKey("FavourAPI.Data.Models.PersonProvider", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PhoneNumber", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Office")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("OfficeId");

                    b.HasOne("FavourAPI.Data.Models.PersonProvider")
                        .WithMany("PhoneNumbers")
                        .HasForeignKey("PersonProviderId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Position", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.CompanyProvider")
                        .WithMany("TargetedPositions")
                        .HasForeignKey("CompanyProviderId");

                    b.HasOne("FavourAPI.Data.Models.FieldOfStudy")
                        .WithMany("Positions")
                        .HasForeignKey("FieldOfStudyId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.PositionSkill", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Position", "Position")
                        .WithMany("PositionSkills")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.Skill", "Skill")
                        .WithMany("PositionSkills")
                        .HasForeignKey("SkillName");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Role", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.RoleName", "Name")
                        .WithMany()
                        .HasForeignKey("Name1");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.SavedJobOffer", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Consumer", "Consumer")
                        .WithMany("SavedJobOffers")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("FavourAPI.Data.Models.JobOffer", "JobOffer")
                        .WithMany("SavedJobOffers")
                        .HasForeignKey("JobOfferId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Skill", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Consumer", "Consumer")
                        .WithMany("Skills")
                        .HasForeignKey("ConsumerId");

                    b.HasOne("FavourAPI.Data.Models.JobOffer")
                        .WithMany("RequiredSkills")
                        .HasForeignKey("JobOfferId");
                });

            modelBuilder.Entity("FavourAPI.Data.Models.Subscription", b =>
                {
                    b.HasOne("FavourAPI.Data.Models.Role", "Role")
                        .WithMany("Subscriptions")
                        .HasForeignKey("RoleId");

                    b.HasOne("FavourAPI.Data.Models.User", "User")
                        .WithMany("Subscriptions")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
